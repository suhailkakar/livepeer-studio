openapi: 3.1.0

info:
  title: Livepeer API Reference - test
  description: |
    Welcome to the Livepeer API reference docs. Here you will find all the
    endpoints exposed on the standard Livepeer API, learn how to use them and
    what they return.
  version: 1.0.0

servers:
  - url: "https://livepeer.studio/api"

security:
  - apiKey: []

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: Bearer api-key
  schemas:
    ffmpeg-profile:
      type: object
      description: LMPS ffmpeg profile
      additionalProperties: false
      required:
        - width
        - name
        - height
        - bitrate
        - fps
      properties:
        width:
          type: integer
          minimum: 128
        name:
          type: string
          minLength: 1
          maxLength: 500
          example: 720p
        height:
          type: integer
          minimum: 128
        bitrate:
          type: integer
          minimum: 400
        fps:
          type: integer
          minimum: 0
        fpsDen:
          type: integer
          minimum: 1
        gop:
          type: string
        profile:
          type: string
          enum:
            - H264Baseline
            - H264Main
            - H264High
            - H264ConstrainedHigh
        encoder:
          type: string
          enum:
            - h264
            - hevc
            - vp8
            - vp9
    transcode-profile:
      type: object
      description: Transcode API profile
      additionalProperties: false
      required:
        - bitrate
      properties:
        width:
          type: integer
          minimum: 128
        name:
          type: string
          minLength: 1
          maxLength: 500
          example: 720p
        height:
          type: integer
          minimum: 128
        bitrate:
          type: integer
          minimum: 400
        fps:
          type: integer
          minimum: 0
        fpsDen:
          type: integer
          minimum: 1
        gop:
          type: string
        profile:
          type: string
          enum:
            - H264Baseline
            - H264Main
            - H264High
            - H264ConstrainedHigh
        encoder:
          type: string
          enum:
            - h264
            - hevc
            - vp8
            - vp9
    webhook:
      type: object
      required:
        - name
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        name:
          type: string
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
        events:
          type: array
          items:
            type: string
            enum:
              - stream.started
              - stream.detection
              - stream.idle
              - recording.ready
              - recording.started
              - recording.waiting
              - multistream.connected
              - multistream.error
              - multistream.disconnected
              - playback.user.new
              - playback.accessControl
              - asset.created
              - asset.updated
              - asset.failed
              - asset.ready
              - asset.deleted
              - task.spawned
              - task.updated
              - task.completed
              - task.failed
        url:
          type: string
          format: uri
          pattern: "^http(s)?://"
        sharedSecret:
          type: string
          writeOnly: true
          description: shared secret used to sign the webhook payload
        streamId:
          type: string
          description: streamId of the stream on which the webhook is applied
        status:
          type: object
          readOnly: true
          description: status of webhook
          properties:
            lastFailure:
              type: object
              readOnly: true
              description: failure timestamp and error message with status code
              properties:
                timestamp:
                  type: number
                  readOnly: true
                  example: 1587667174725
                  description:
                    Timestamp (in milliseconds) at which the webhook last failed
                error:
                  readOnly: true
                  type: string
                  description: Webhook failure error message
                  example: Error message
                response:
                  readOnly: true
                  type: string
                  description: Webhook failure response
                  example: Response body
                statusCode:
                  readOnly: true
                  type: number
                  description: Webhook failure status code
                  example: 500
            lastTriggeredAt:
              type: number
              description: |
                Timestamp (in milliseconds) at which the webhook last was
                triggered
              example: 1587667174725
    webhook-response:
      type: object
      required:
        - webhookId
        - statusCode
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        webhookId:
          readOnly: true
          type: string
        eventId:
          readOnly: true
          type: string
        createdAt:
          readOnly: true
          type: number
          description: |
            Timestamp (in milliseconds) at which webhook response object was
            created
          example: 1587667174725
        duration:
          type: number
        statusCode:
          type: number
          default: 0
        response:
          type: object
          additionalProperties: false
          properties:
            body:
              type: string
            headers:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
            redirected:
              type: boolean
            status:
              type: number
            statusText:
              type: string
    clip-payload:
      type: object
      additionalProperties: false
      required:
        - playbackId
        - startTime
      properties:
        playbackId:
          type: string
          description: Playback ID of the stream or asset to clip
        startTime:
          type: number
          description: Start time of the clip in milliseconds
        endTime:
          type: number
          description: End time of the clip in milliseconds
        name:
          type: string
          description: Name of the clip
        sessionId:
          type: string
          description: Session ID of the stream to clip
    stream:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        name:
          type: string
          example: test_stream
        creatorId:
          $ref: "#/components/schemas/creator-id"
        lastSeen:
          type: number
          example: 1587667174725
        sourceSegments:
          type: number
          example: 1
        transcodedSegments:
          type: number
          example: 2
        sourceSegmentsDuration:
          type: number
          example: 1
          description: "Duration of all the source segments, sec"
        transcodedSegmentsDuration:
          type: number
          example: 2
          description: "Duration of all the transcoded segments, sec"
        sourceBytes:
          type: number
          example: 1
        transcodedBytes:
          type: number
          example: 2
        ingestRate:
          type: number
          example: 1
          description: Rate at which sourceBytes increases (bytes/second)
        outgoingRate:
          type: number
          example: 2
          description: Rate at which transcodedBytes increases (bytes/second)
        isActive:
          type: boolean
          description: If currently active
        isHealthy:
          $ref: "#/components/schemas/stream-health-payload/properties/is_healthy"
        issues:
          $ref: "#/components/schemas/stream-health-payload/properties/human_issues"
        createdByTokenName:
          type: string
          readOnly: true
          description: Name of the token used to create this object
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
        parentId:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: Points to parent stream object
        streamKey:
          type: string
          example: hgebdhhigq
          description: Used to form RTMP ingest URL
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        profiles:
          type: array
          default:
            - name: 240p0
              fps: 0
              bitrate: 250000
              width: 426
              height: 240
            - name: 360p0
              fps: 0
              bitrate: 800000
              width: 640
              height: 360
            - name: 480p0
              fps: 0
              bitrate: 1600000
              width: 854
              height: 480
            - name: 720p0
              fps: 0
              bitrate: 3000000
              width: 1280
              height: 720
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
        record:
          description: |
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          type: boolean
          example: false
        multistream:
          type: object
          additionalProperties: false
          properties:
            targets:
              type: array
              example:
                - id: PUSH123
                  profile: 720p
              description: |
                References to targets where this stream will be simultaneously
                streamed to
              items:
                type: object
                required:
                  - profile
                additionalProperties: false
                properties:
                  profile:
                    type: string
                    description: |
                      Name of transcoding profile that should be sent. Use
                      "source" for pushing source stream data
                    minLength: 1
                    maxLength: 500
                    example: 720p
                  videoOnly:
                    type: boolean
                    description: |
                      If true, the stream audio will be muted and only silent
                      video will be pushed to the target.
                    default: false
                  id:
                    type: string
                    description:
                      ID of multistream target object where to push this stream
                  spec:
                    type: object
                    writeOnly: true
                    description: |
                      Inline multistream target object. Will automatically
                      create the target resource to be used by the created
                      stream.
                    required:
                      - url
                    additionalProperties: false
                    properties:
                      name:
                        type: string
                      url:
                        $ref: "#/components/schemas/multistream-target/properties/url"
        suspended:
          type: boolean
          description: If currently suspended
    new-stream-payload:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/stream/properties/name"
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        profiles:
          $ref: "#/components/schemas/stream/properties/profiles"
        record:
          $ref: "#/components/schemas/stream/properties/record"
        multistream:
          $ref: "#/components/schemas/stream/properties/multistream"
    deactivate-many-payload:
      type: object
      additionalProperties: false
      properties:
        ids:
          type: array
          minItems: 1
          items:
            type: string
    stream-set-active-payload:
      type: object
      required:
        - active
      properties:
        active:
          $ref: "#/components/schemas/stream/properties/isActive"
        hostName:
          type: string
          description: Hostname of the Mist server that processes that stream
        startedAt:
          type: number
          description: Timestamp (in milliseconds) at which the stream started.
          example: 1587667174725
    asset-patch-payload:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/asset/properties/name"
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        storage:
          $ref: "#/components/schemas/new-asset-payload/properties/storage"
    stream-patch-payload:
      type: object
      additionalProperties: false
      properties:
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        record:
          $ref: "#/components/schemas/stream/properties/record"
        suspended:
          $ref: "#/components/schemas/stream/properties/suspended"
        multistream:
          $ref: "#/components/schemas/stream/properties/multistream"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        profiles:
          $ref: "#/components/schemas/stream/properties/profiles"
    stream-health-payload:
      type: object
      description: |
        Payload received from Catalyst about the health of livestreams currently
        or recently active on Mist.
      required:
        - stream_name
        - is_active
        - is_healthy
      properties:
        stream_name:
          type: string
          description: |
            The name of the stream within Catalyst/Mist, normally comprised of
            the base stream name with the playback ID after the + sign.
          example: videorec+eaw4nk06ts2d0mzb
        session_id:
          description: |
            The unique identifier for the specific session, created by Mist and
            used for creating the session object in the DB.
          type: string
        is_active:
          type: boolean
          description: Indicates whether the stream is currently live or not.
        is_healthy:
          type: boolean
          description: Indicates whether the stream is healthy or not.
        issues:
          type: string
          description: |
            Raw issues affecting the stream as described by Mist, if any. We
            don't expose those to the end-user, showing only human_issues
            instead.
        human_issues:
          type: array
          description: |
            A string array of human-readable errors describing issues affecting
            the stream, if any.
          items:
            type: string
        tracks:
          type: object
          description: |
            A map of track objects containing information about the stream's
            tracks. The keys are the unique track ID from Mist.
          additionalProperties:
            type: object
            properties:
              codec:
                type: string
                description: The codec being used for the track.
              kbits:
                type: number
                description: "The bitrate of the track, in kilobits per second."
              keys:
                type: object
                description:
                  An object containing additional track-specific metrics.
                additionalProperties:
                  type: number
              fpks:
                type: number
                description: |
                  The framerate of the track, in frames per thousand seconds
                  (kilo-second).
              height:
                type: number
                description: The height of the track's video resolution.
              width:
                type: number
                description: The width of the track's video resolution.
        extra:
          type: object
          description: |
            An object containing any additional fields sent by mist in the
            health (STREAM_BUFFER) payload.
          additionalProperties: true
    multistream-target-patch-payload:
      $ref: "#/components/schemas/multistream-target"
      required: []
    webhook-patch-payload:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/webhook/properties/name"
        url:
          $ref: "#/components/schemas/webhook/properties/url"
        events:
          $ref: "#/components/schemas/webhook/properties/events"
        sharedSecret:
          $ref: "#/components/schemas/webhook/properties/sharedSecret"
        streamId:
          $ref: "#/components/schemas/webhook/properties/streamId"
    webhook-status-payload:
      type: object
      additionalProperties: false
      properties:
        errorMessage:
          type: string
          description: Error message if the webhook failed to process the event
        response:
          $ref: "#/components/schemas/webhook-response"
    session:
      type: object
      required:
        - name
        - streamId
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        name:
          type: string
          example: test_session
        lastSeen:
          type: number
          example: 1587667174725
        sourceSegments:
          type: number
          example: 1
        transcodedSegments:
          type: number
          example: 2
        sourceSegmentsDuration:
          type: number
          example: 1
          description: "Duration of all the source segments, sec"
        transcodedSegmentsDuration:
          type: number
          example: 2
          description: "Duration of all the transcoded segments, sec"
        sourceBytes:
          type: number
          example: 1
        transcodedBytes:
          type: number
          example: 2
        ingestRate:
          type: number
          example: 1
          description: Rate at which sourceBytes increases (bytes/second)
        outgoingRate:
          type: number
          example: 2
          description: Rate at which transcodedBytes increases (bytes/second)
        isHealthy:
          $ref: "#/components/schemas/stream-health-payload/properties/is_healthy"
        issues:
          $ref: "#/components/schemas/stream-health-payload/properties/human_issues"
        createdAt:
          readOnly: true
          type: number
          description:
            Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
        parentId:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: Points to parent stream object
        record:
          description: |
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          type: boolean
          example: false
        recordingStatus:
          readOnly: true
          type: string
          description: Status of the recording process of this stream session.
          enum:
            - waiting
            - ready
            - none
        recordingUrl:
          type: string
          readOnly: true
          description: URL for accessing the recording of this stream session.
        mp4Url:
          type: string
          readOnly: true
          description: URL for the stream session recording packaged in an mp4.
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
    error:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          minItems: 1
          items:
            type: string
            example:
              - id not provided
              - user not found
    multistream-target:
      type: object
      required:
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        name:
          type: string
        url:
          type: string
          writeOnly: true
          description:
            Livepeer-compatible multistream target URL (RTMP(S) or SRT)
          example: "rtmps://live.my-service.tv/channel/secretKey"
          format: uri
          pattern: "^(srt|rtmps?)://"
        disabled:
          type: boolean
          description: |
            If true then this multistream target will not be used for pushing
            even if it is configured in a stream object.
        createdAt:
          type: number
          readOnly: true
          description: |
            Timestamp (in milliseconds) at which multistream target object was
            created
          example: 1587667174725
    asset:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - source
      properties:
        id:
          type: string
          readOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        type:
          type: string
          enum:
            - video
            - audio
          description: Type of the asset.
          example: video
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL and storage folder
        staticMp4:
          type: boolean
          writeOnly: true
          description: Whether to generate MP4s for the asset.
        playbackUrl:
          readOnly: true
          type: string
          example: >-
            https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8
          description: URL for HLS playback
        downloadUrl:
          readOnly: true
          type: string
          example: "https://livepeercdn.com/asset/eaw4nk06ts2d0mzb/video"
          description: URL to manually download the asset if desired
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        source:
          oneOf:
            - additionalProperties: false
              required:
                - type
                - url
              properties:
                type:
                  type: string
                  enum:
                    - url
                url:
                  type: string
                  description: URL from which the asset was uploaded
                gatewayUrl:
                  type: string
                  description:
                    Gateway URL from asset if parsed from provided URL on
                    upload.
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
            - additionalProperties: false
              required:
                - type
                - sessionId
              properties:
                type:
                  type: string
                  enum:
                    - recording
                sessionId:
                  type: string
                  description:
                    ID of the session from which this asset was created
            - additionalProperties: false
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - directUpload
                    - clip
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
                sourceId:
                  type: string
                  description:
                    ID of the asset or stream from which this asset was created
                sessionId:
                  type: string
                  description:
                    ID of the session from which this asset was created
                playbackId:
                  type: string
                  description:
                    Playback ID of the asset or stream from which this asset was
                    created
                requesterId:
                  type: string
                  description:
                    ID of the requester from which this asset was created
                assetId:
                  type: string
                  description: ID of the asset from which this asset was created
        creatorId:
          $ref: "#/components/schemas/creator-id"
        storage:
          additionalProperties: false
          properties:
            ipfs:
              type: object
              additionalProperties: false
              properties:
                spec:
                  type: object
                  additionalProperties: false
                  default: {}
                  properties:
                    nftMetadataTemplate:
                      type: string
                      enum:
                        - file
                        - player
                      default: file
                      description: |
                        Name of the NFT metadata template to export. 'player'
                        will embed the Livepeer Player on the NFT while 'file'
                        will reference only the immutable MP4 files.
                    nftMetadata:
                      type: object
                      description: |
                        Additional data to add to the NFT metadata exported to
                        IPFS. Will be deep merged with the default metadata
                        exported.
                $ref: "#/components/schemas/ipfs-file-info/properties"
                nftMetadata:
                  $ref: "#/components/schemas/ipfs-file-info"
                updatedAt:
                  readOnly: true
                  type: number
                  description: |
                    Timestamp (in milliseconds) at which IPFS export task was
                    updated
                  example: 1587667174725
            status:
              $ref: "#/components/schemas/storage-status"
        status:
          readOnly: true
          type: object
          additionalProperties: false
          required:
            - phase
            - updatedAt
          description: Status of the asset
          properties:
            phase:
              type: string
              description: Phase of the asset
              enum:
                - uploading
                - waiting
                - processing
                - ready
                - failed
            updatedAt:
              type: number
              description:
                Timestamp (in milliseconds) at which the asset was last updated
              example: 1587667174725
            progress:
              type: number
              description: Current progress of the task creating this asset.
            errorMessage:
              type: string
              description: Error message if the asset creation failed.
        name:
          type: string
          description: |
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        createdAt:
          readOnly: true
          type: number
          description: Timestamp (in milliseconds) at which asset was created
          example: 1587667174725
        size:
          readOnly: true
          type: number
          description: Size of the asset in bytes
          example: 84934509
        hash:
          type: array
          description: Hash of the asset
          items:
            type: object
            additionalProperties: false
            properties:
              hash:
                type: string
                description: Hash of the asset
                example: >-
                  9b560b28b85378a5004117539196ab24e21bbd75b0e9eb1a8bc7c5fd80dc5b57
              algorithm:
                type: string
                description: Hash algorithm used to compute the hash
                example: sha256
        videoSpec:
          readOnly: true
          type: object
          additionalProperties: false
          description: Video metadata
          properties:
            format:
              type: string
              description: Format of the asset
              example: mp4
            duration:
              type: number
              description: Duration of the asset in seconds (float)
              example: 23.8328
            bitrate:
              type: number
              description: Bitrate of the video in bits per second
              example: 1000000
            tracks:
              type: array
              description: |
                List of tracks associated with the asset when the format
                contemplates them (e.g. mp4)
              items:
                type: object
                additionalProperties: false
                required:
                  - type
                  - codec
                properties:
                  type:
                    type: string
                    description: type of track
                    enum:
                      - video
                      - audio
                    example: video
                  codec:
                    type: string
                    description: Codec of the track
                    example: aac
                  startTime:
                    type: number
                    description: Start time of the track in seconds
                    example: 23.8238
                  duration:
                    type: number
                    description: Duration of the track in seconds
                    example: 23.8238
                  bitrate:
                    type: number
                    description: Bitrate of the track in bits per second
                    example: 1000000
                  width:
                    type: number
                    description: Width of the track - only for video tracks
                    example: 1920
                  height:
                    type: number
                    description: Height of the track - only for video tracks
                    example: 1080
                  pixelFormat:
                    type: string
                    description:
                      Pixel format of the track - only for video tracks
                    example: yuv420p
                  fps:
                    type: number
                    description: Frame rate of the track - only for video tracks
                    example: 30
                  channels:
                    type: number
                    description: Amount of audio channels in the track
                    example: 2
                  sampleRate:
                    type: number
                    description: |
                      Sample rate of the track in samples per second - only for
                      audio tracks
                    example: 44100
                  bitDepth:
                    type: number
                    description: Bit depth of the track - only for audio tracks
                    example: 16
    ipfs-file-info:
      type: object
      required:
        - cid
      additionalProperties: false
      properties:
        cid:
          type: string
          description: CID of the file on IPFS
        url:
          readOnly: true
          type: string
          description: URL with IPFS scheme for the file
        gatewayUrl:
          readOnly: true
          type: string
          description: URL to access file via HTTP through an IPFS gateway
    new-signing-key-payload:
      additionalProperties: false
      properties:
        name:
          type: string
          description: Name of the signing key
    new-asset-payload:
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: |
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        staticMp4:
          type: boolean
          description: Whether to generate MP4s for the asset.
          example: true
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        storage:
          additionalProperties: false
          properties:
            ipfs:
              description: |
                Set to true to make default export to IPFS. To customize the
                pinned files, specify an object with a spec field. False or null
                means to unpin from IPFS, but it's unsupported right now.
              oneOf:
                - type: object
                  additionalProperties: false
                  properties:
                    spec:
                      oneOf:
                        - type: "null"
                        - $ref: >-
                            #/components/schemas/asset/properties/storage/properties/ipfs/properties/spec
                - type: boolean
                - type: "null"
        url:
          type: string
          format: uri
          pattern: "^(https?|ipfs|ar)://"
          description: |
            URL where the asset contents can be retrieved. Only allowed (and
            also required) in the upload asset via URL endpoint. For an IPFS
            source, this should be similar to: `ipfs://{CID}`. For an Arweave
            source: `ar://{CID}`.
          example: "https://s3.amazonaws.com/my-bucket/path/filename.mp4"
        encryption:
          type: object
          additionalProperties: false
          required:
            - encryptedKey
          properties:
            encryptedKey:
              type: string
              writeOnly: true
              description: >-
                Encryption key used to encrypt the asset. Only writable in the
                upload asset endpoints and cannot be retrieved back.
        c2pa:
          type: boolean
          description: Decides if the output video should include C2PA signature
    room-user-payload:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
          description: Display name
          example: name
        canPublish:
          type: boolean
          description: Whether a user is allowed to publish audio/video tracks
          example: true
        canPublishData:
          type: boolean
          description:
            Whether a user is allowed to publish data messages to the room
          example: true
        metadata:
          type: string
          description: User defined payload to store for the participant
    create-room-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the room
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
    room-user-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
        joinUrl:
          type: string
          description:
            Joining URL - use this for Livepeer's default meeting app (see the
            multiparticipant streaming guide for more info).
          example: https://meet.livepeer.chat
        token:
          type: string
          description:
            Joining JWT - this can be used if you have a custom meeting app (see
            the multiparticipant streaming guide for more info).
          example: token
    get-room-user-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
        joinedAt:
          type: integer
          description: Timestamp (in milliseconds) at which the user joined
          example: 1687517025261
        name:
          type: string
          description: The display name of the user
          example: name
        isPublisher:
          type: boolean
          description: Whether a user is allowed to publish audio/video tracks
          example: true
          default: true
        metadata:
          type: string
          description: User defined payload to store for the participant
    room-egress-payload:
      type: object
      required:
        - streamId
      additionalProperties: false
      properties:
        streamId:
          type: string
          description: The ID of the Livepeer Stream to stream to
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
    room-user-update-payload:
      type: object
      required:
        - canPublish
      additionalProperties: false
      properties:
        canPublish:
          type: boolean
          description:
            Whether a user is allowed to publish audio/video tracks (i.e. their
            microphone and webcam)
          example: true
          default: true
        canPublishData:
          type: boolean
          description:
            Whether a user is allowed to publish data messages to the room
          example: true
          default: true
        metadata:
          type: string
          description: User defined payload to store for the participant
    transcode-payload:
      additionalProperties: false
      required:
        - input
        - storage
        - outputs
      properties:
        input:
          oneOf:
            - type: object
              additionalProperties: false
              description: URL input video
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  pattern: "^(https?|ipfs|ar)://"
                  description: URL of the video to transcode
                  example: "https://s3.amazonaws.com/bucket/file.mp4"
            - type: object
              additionalProperties: false
              description: S3-like storage input video
              required:
                - type
                - endpoint
                - bucket
                - path
                - credentials
              properties:
                type:
                  type: string
                  enum:
                    - s3
                  description: |
                    Type of service. This is optional and defaults to `url` if
                    ŚURL field is provided.
                endpoint:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: >-
                    Service endpoint URL (AWS S3 endpoint list:
                    https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP
                    S3 endpoint: https://storage.googleapis.com, Storj:
                    https://gateway.storjshare.io)
                  example: "https://gateway.storjshare.io"
                bucket:
                  type: string
                  description: Bucket with input file
                  example: inputbucket
                path:
                  type: string
                  description: Path to the input file inside the bucket
                  example: /path/file.mp4
                credentials:
                  type: object
                  additionalProperties: false
                  required:
                    - accessKeyId
                    - secretAccessKey
                  description: Credentials for the private input video storage
                  properties:
                    accessKeyId:
                      type: string
                      description: Access Key ID
                      example: AKIAIOSFODNN7EXAMPLE
                    secretAccessKey:
                      type: string
                      description: Secret Access Key
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
        storage:
          oneOf:
            - type: object
              additionalProperties: false
              required:
                - type
                - endpoint
                - bucket
                - credentials
              description: Storage for the output files
              properties:
                type:
                  type: string
                  enum:
                    - s3
                  description: Type of service used for output files
                endpoint:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: >-
                    Service endpoint URL (AWS S3 endpoint list:
                    https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP
                    S3 endpoint: https://storage.googleapis.com, Storj:
                    https://gateway.storjshare.io)
                  example: "https://gateway.storjshare.io"
                bucket:
                  type: string
                  description: Bucket with output files
                  example: outputbucket
                credentials:
                  type: object
                  additionalProperties: false
                  required:
                    - accessKeyId
                    - secretAccessKey
                  description: Credentials for the output video storage
                  properties:
                    accessKeyId:
                      type: string
                      description: Access Key ID
                      example: AKIAIOSFODNN7EXAMPLE
                    secretAccessKey:
                      type: string
                      description: Secret Access Key
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            - type: object
              additionalProperties: false
              required:
                - type
                - credentials
              description: Storage for the output files
              properties:
                type:
                  type: string
                  enum:
                    - web3.storage
                  description: Type of service used for output files
                credentials:
                  type: object
                  additionalProperties: false
                  required:
                    - proof
                  description: |
                    Delegation proof for Livepeer to be able to upload to
                    web3.storage
                  properties:
                    proof:
                      type: string
                      description: Base64 encoded UCAN delegation proof
                      example: >-
                        EaJlcm9vdHOAZ3ZlcnNpb24BmgIBcRIg2uxHpcPYSWNtifMKFkPC7IEDvFDCxCd3ADViv0coV7SnYXNYRO2hA0AnblHEW38s3lSlcwaDjPn
        outputs:
          type: object
          additionalProperties: false
          description: Output formats
          properties:
            hls:
              type: object
              additionalProperties: false
              required:
                - path
              description: HLS output format
              properties:
                path:
                  type: string
                  description: Path for the HLS output
                  example: /samplevideo/hls
            mp4:
              type: object
              additionalProperties: false
              required:
                - path
              description: MP4 output format
              properties:
                path:
                  type: string
                  description: Path for the MP4 output
                  example: /samplevideo/mp4
            fmp4:
              type: object
              additionalProperties: false
              required:
                - path
              description: FMP4 output format
              properties:
                path:
                  type: string
                  description: Path for the FMP4 output
                  example: /samplevideo/fmp4
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/transcode-profile"
        targetSegmentSizeSecs:
          type: number
          description:
            How many seconds the duration of each output segment should be
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        c2pa:
          type: boolean
          description: Decides if the output video should include C2PA signature
    task:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: Task ID
          readOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        type:
          type: string
          description: Type of the task
          enum:
            - upload
            - export
            - export-data
            - transcode-file
            - clip
        createdAt:
          readOnly: true
          type: number
          description: Timestamp (in milliseconds) at which task was created
          example: 1587667174725
        scheduledAt:
          readOnly: true
          type: number
          description: |
            Timestamp (in milliseconds) at which the task was scheduled for
            execution (e.g. after file upload finished).
          example: 1587667174725
        inputAssetId:
          type: string
          description: ID of the input asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        outputAssetId:
          type: string
          description: ID of the output asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        requesterId:
          type: string
          description: ID of the requester hash(IP + SALT + PlaybackId)
        params:
          type: object
          additionalProperties: false
          description: Parameters of the task
          properties:
            upload:
              type: object
              additionalProperties: false
              description: Parameters for the upload task
              properties:
                url:
                  type: string
                  description: URL of the asset to "upload"
                  example: "https://cdn.livepeer.com/ABC123/filename.mp4"
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
                c2pa:
                  type: boolean
                  description:
                    Decides if the output video should include C2PA signature
            export:
              $ref: "#/components/schemas/export-task-params"
            exportData:
              type: object
              additionalProperties: false
              description: Parameters for the export-data task
              required:
                - content
              properties:
                content:
                  type: object
                  description: File content to store into IPFS
                ipfs:
                  $ref: "#/components/schemas/ipfs-export-params"
                type:
                  type: string
                  description: Optional type of content
                id:
                  type: string
                  description: Optional ID of the content
            transcode-file:
              type: object
              additionalProperties: false
              description: Parameters for the transcode-file task
              properties:
                input:
                  type: object
                  additionalProperties: false
                  description: Input video file to transcode
                  properties:
                    url:
                      type: string
                      description: |
                        URL of a video to transcode, accepts object-store format
                        "s3+https"
                      example: "https://cdn.livepeer.com/ABC123/filename.mp4"
                storage:
                  type: object
                  additionalProperties: false
                  description: Storage for the output files
                  properties:
                    url:
                      type: string
                      description: |
                        URL of the output storage, accepts object-store format
                        "s3+https"
                      example: "s3+https://accessKeyId:secretAccessKey@s3Endpoint/bucket"
                outputs:
                  type: object
                  additionalProperties: false
                  description: Output formats
                  properties:
                    hls:
                      type: object
                      additionalProperties: false
                      description: HLS output format
                      properties:
                        path:
                          type: string
                          description: Path for the HLS output
                          example: /samplevideo/hls
                    mp4:
                      type: object
                      additionalProperties: false
                      description: MP4 output format
                      properties:
                        path:
                          type: string
                          description: Path for the MP4 output
                          example: /samplevideo/mp4
                profiles:
                  type: array
                  items:
                    $ref: "#/components/schemas/transcode-profile"
                targetSegmentSizeSecs:
                  type: number
                  description: |
                    How many seconds the duration of each output segment should
                    be
                creatorId:
                  $ref: "#/components/schemas/input-creator-id"
                c2pa:
                  type: boolean
                  description:
                    Decides if the output video should include C2PA signature
            clip:
              properties:
                url:
                  type: string
                  description: URL of the asset to "clip"
                clipStrategy:
                  type: object
                  description: >-
                    Strategy to use for clipping the asset. If not specified,
                    the default strategy that Catalyst is configured for will be
                    used. This field only available for admin users, and is only
                    used for E2E testing.
                  additionalProperties: false
                  properties:
                    startTime:
                      type: number
                      description: Start time of the clip in milliseconds
                    endTime:
                      type: number
                      description: End time of the clip in milliseconds
                    playbackId:
                      type: string
                      description: Playback ID of the stream or asset to clip
                catalystPipelineStrategy:
                  type: string
                  description: >-
                    Force to use a specific strategy in the Catalyst pipeline.
                    If not specified, the default strategy that Catalyst is
                    configured for will be used. This field only available for
                    admin users, and is only used for E2E testing.
                  enum:
                    - catalyst
                    - catalyst_ffmpeg
                    - background_external
                    - background_mist
                    - fallback_external
                    - external
                sessionId:
                  type: string
                  description: ID of the session
                inputId:
                  type: string
                  description: ID of the input asset or stream
        status:
          readOnly: true
          type: object
          additionalProperties: false
          description: Status of the task
          required:
            - phase
            - updatedAt
          properties:
            phase:
              type: string
              description: Phase of the task
              enum:
                - pending
                - waiting
                - running
                - failed
                - completed
                - cancelled
            updatedAt:
              type: number
              description: Timestamp (in milliseconds) at which task was updated
              example: 1587667174725
            progress:
              type: number
              description: Current progress of the task in a 0-1 ratio
            errorMessage:
              type: string
              description: Error message if the task failed
            retries:
              type: number
              description: Number of retries done on the task
            step:
              type: string
              writeOnly: true
              description: Step of the task processing
        output:
          type: object
          additionalProperties: false
          description: Output of the task
          properties:
            upload:
              type: object
              additionalProperties: true
              description: Output of the upload task
              properties:
                videoFilePath:
                  type: string
                  writeOnly: true
                metadataFilePath:
                  type: string
                  writeOnly: true
                assetSpec:
                  $ref: "#/components/schemas/asset"
            export:
              type: object
              additionalProperties: false
              description: Output of the export task
              properties:
                ipfs:
                  type: object
                  additionalProperties: false
                  required:
                    - videoFileCid
                  properties:
                    videoFileCid:
                      type: string
                      description: IPFS CID of the exported video file
                    videoFileUrl:
                      type: string
                      readOnly: true
                      description: URL for the file with the IPFS protocol
                    videoFileGatewayUrl:
                      readOnly: true
                      type: string
                      description:
                        URL to access file via HTTP through an IPFS gateway
                    nftMetadataCid:
                      type: string
                      description:
                        IPFS CID of the default metadata exported for the video
                    nftMetadataUrl:
                      readOnly: true
                      type: string
                      description:
                        URL for the metadata file with the IPFS protocol
                    nftMetadataGatewayUrl:
                      readOnly: true
                      type: string
                      description: |
                        URL to access metadata file via HTTP through an IPFS
                        gateway
            exportData:
              type: object
              additionalProperties: false
              description: Output of the export data task
              properties:
                ipfs:
                  type: object
                  additionalProperties: false
                  required:
                    - cid
                  properties:
                    cid:
                      type: string
                      description: IPFS CID of the exported data
    input-creator-id:
      oneOf:
        - $ref: "#/components/schemas/creator-id"
        - type: string
          description: >-
            Helper syntax to specify an unverified creator ID, fully managed by
            the developer.
    creator-id:
      type: object
      oneOf:
        - type: object
          additionalProperties: false
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum:
                - unverified
            value:
              type: string
              description:
                Developer-managed ID of the user who created the resource.
    export-task-params:
      description: Parameters for the export task
      oneOf:
        - type: object
          additionalProperties: false
          required:
            - custom
          properties:
            custom:
              type: object
              description: custom URL parameters for the export task
              additionalProperties: false
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: URL where to export the asset
                  example: >-
                    https://s3.amazonaws.com/my-bucket/path/filename.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=LLMMB
                method:
                  type: string
                  description: Method to use on the export request
                  default: PUT
                headers:
                  type: object
                  description: Headers to add to the export request
                  additionalProperties:
                    type: string
        - type: object
          additionalProperties: false
          required:
            - ipfs
          properties:
            ipfs:
              $ref: "#/components/schemas/ipfs-export-params"
    signing-key:
      type: object
      additionalProperties: false
      required:
        - publicKey
      properties:
        id:
          type: string
          readOnly: true
          example: 78df0075-b5f3-4683-a618-1086faca35dc
        name:
          type: string
          description: Name of the signing key
        createdAt:
          readOnly: true
          type: number
          description:
            Timestamp (in milliseconds) at which the signing-key was created
          example: 1587667174725
        lastSeen:
          readOnly: true
          type: number
          description:
            Timestamp (in milliseconds) at which the signing-key was last used
          example: 1587667174725
        publicKey:
          type: string
        disabled:
          type: boolean
          description: Disable the signing key to allow rotation safely
    signing-key-response-payload:
      type: object
      required:
        - publicKey
        - privateKey
      properties:
        $ref: "#/components/schemas/signing-key/properties"
        privateKey:
          type: string
    user:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          type: string
          description: user email address
          example: useremail@gmail.com
        password:
          type: string
          example: thisisapassword
          minLength: 64
          maxLength: 64
          writeOnly: true
        emailValidToken:
          type: string
          example: E1F53135E559C253
          writeOnly: true
        emailValid:
          type: boolean
          example: true
        suspended:
          type: boolean
        disabled:
          type: boolean
        salt:
          type: string
          example: E1F53135E559C253
          writeOnly: true
        id:
          type: string
          readOnly: true
          example: abc123
        firstName:
          type: string
          example: Joe
        lastName:
          type: string
          example: Smith
        organization:
          type: string
          example: Livepeer
        phone:
          type: string
          example: 2034212122
        ccLast4:
          type: string
          example: 1234
        ccBrand:
          type: string
          example: 1234
        createdAt:
          type: number
          description:
            Timestamp (in milliseconds) at which user object was created
          example: 1587667174725
        verifiedAt:
          type: number
          description:
            Timestamp (in milliseconds) at which user object was verified
          example: 1587667174725
        planChangedAt:
          type: number
          description:
            Timestamp (in milliseconds) at which user object was verified
          example: 1587667174725
        lastStreamedAt:
          type: number
          description: |
            Timestamp (in milliseconds) at which user streamed RTMP stream last
            time
          example: 1587667174725
        lastSeen:
          type: number
          description:
            Timestamp (in milliseconds) at which user's password was used
          example: 1587667174725
    usage:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: day associated with usage
          example: 2021-01-30T00:00:00.000Z
        date:
          type: number
          readOnly: true
          example: usage
        sourceSegments:
          type: number
          example: 200000
        transcodedSegments:
          type: number
          example: 200000
        sourceSegmentsDuration:
          type: number
          example: 200000
        transcodedSegmentsDuration:
          type: number
          example: 200000
        streamCount:
          type: number
          example: 200000
    playback-policy:
      type: object
      description:
        Whether the playback policy for a asset or stream is public or signed
      additionalProperties: false
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - public
            - jwt
            - webhook
        webhookId:
          type: string
          description: ID of the webhook to use for playback policy
        webhookContext:
          type: object
          description: User-defined webhook context
          additionalProperties: true
    room:
      type: object
      required:
        - id
        - participants
        - events
      properties:
        id:
          type: string
          readOnly: true
          description: room ID
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
        createdAt:
          type: number
          readOnly: true
          description: Timestamp (in milliseconds) at which the room was created
          example: 1587667174725
        updatedAt:
          type: number
          readOnly: true
          description: Timestamp (in milliseconds) at which room was updated
          example: 1587667174725
        egressId:
          type: string
          description: internal ID for egress output
        participants:
          type: object
          additionalProperties:
            type: object
            properties:
              identity:
                type: string
                description: participant ID
              name:
                type: string
                description: user defined participant name
              joinedAt:
                type: integer
                description: the time the participant joined
              leftAt:
                type: integer
                description: the time the participant left
    usage-metric:
      type: object
      description: |
        An individual metric about usage of a user.
      required:
        - UserID
        - CreatorID
        - DeliveryUsageMins
        - TotalUsageMins
        - StorageUsageMins
      properties:
        UserID:
          type: string
          description: The user ID associated with the metric
        CreatorID:
          type: string
          description: The creator ID associated with the metric
        DeliveryUsageMins:
          type: number
          description: The number of minutes of delivery usage
        TotalUsageMins:
          type: number
          description: The number of minutes of total usage
        StorageUsageMins:
          type: number
          description: The number of minutes of storage usage
    viewership-metric:
      type: object
      description: |
        An individual metric about viewership of an asset. Necessarily, at least
        1 of playbackId and dStorageUrl will be present, depending on the query.
      required:
        - viewCount
        - playtimeMins
      properties:
        playbackId:
          type: string
          description: The playback ID associated with the metric
        creatorId:
          type: string
          description: The ID of the creator associated with the metric
        viewerId:
          type: string
          description: The ID of the viewer associated with the metric
        dStorageUrl:
          type: string
          description: The URL of the distributed storage used for the asset
        timestamp:
          type: number
          example: 1587667174725
          description: |
            Timestamp (in milliseconds) when the metric was recorded. If the
            query contains a time step, this timestamp will point to the
            beginning of the time step period.
        device:
          type: string
          description: The device used by the viewer
        deviceType:
          type: string
          description: The type of the device used by the viewer
        cpu:
          type: string
          description: The CPU used by the viewer's device
        os:
          type: string
          description: The operating system used by the viewer
        browser:
          type: string
          description: The browser used by the viewer
        browserEngine:
          type: string
          description: The browser engine used by the viewer's browser
        continent:
          type: string
          description: The continent where the viewer is located
        country:
          type: string
          description: The country where the viewer is located
        subdivision:
          type: string
          description: |
            The subdivision (e.g., state or province) where the viewer is
            located
        timezone:
          type: string
          description: The timezone where the viewer is located
        geohas:
          type: string
          description:
            Geographic encoding of the viewers location. Accurate to 3 digits.
        viewCount:
          type: integer
          description: The number of views for the asset
        playtimeMins:
          type: number
          description: The total playtime in minutes for the asset
        ttffMs:
          type: number
          description: The time-to-first-frame (TTFF) in milliseconds
        rebufferRatio:
          type: number
          description: The rebuffering ratio for the asset
        errorRate:
          type: number
          description: The error rate for the asset
        exitsBeforeStart:
          type: number
          description: |
            The percentage of sessions that existed before the asset started
            playing
    playback-info:
      type: object
      additionalProperties: false
      required:
        - type
        - meta
      properties:
        type:
          type: string
          example: vod
          enum:
            - live
            - vod
            - recording
        meta:
          type: object
          additionalProperties: false
          required:
            - source
          properties:
            live:
              type: number
              enum:
                - 0
                - 1
            playbackPolicy:
              $ref: "#/components/schemas/playback-policy"
            source:
              type: array
              items:
                type: object
                additionalProperties: false
                required:
                  - hrn
                  - type
                  - url
                properties:
                  hrn:
                    type: string
                    description: Human Readable Name
                    example: MP4
                    enum:
                      - HLS (TS)
                      - MP4
                      - WebRTC (H264)
                      - Thumbnail (JPEG)
                      - Thumbnails
                  type:
                    type: string
                    example: html5/video/mp4
                    enum:
                      - html5/application/vnd.apple.mpegurl
                      - html5/video/mp4
                      - html5/video/h264
                      - image/jpeg
                      - text/vtt
                  url:
                    type: string
                    example: >-
                      https://asset-cdn.lp-playback.monster/hls/1bde4o2i6xycudoy/static360p0.mp4
                  size:
                    type: number
                    example: 494778
                  width:
                    type: number
                    example: 204
                  height:
                    type: number
                    example: 360
                  bitrate:
                    type: number
                    example: 449890
            dvrPlayback:
              type: array
              items:
                type: object
                additionalProperties: false
                properties:
                  hrn:
                    type: string
                    example: MP4
                    enum:
                      - HLS (TS)
                  type:
                    type: string
                    example: html5/video/mp4
                    enum:
                      - html5/application/vnd.apple.mpegurl
                  url:
                    type: string
                    example: >-
                      https://asset-cdn.lp-playback.monster/hls/1bde4o2i6xycudoy/static360p0.mp4
                  error:
                    type: string
            attestation:
              $ref: "#/components/schemas/attestation"
    attestation:
      type: object
      additionalProperties: false
      required:
        - primaryType
        - domain
        - message
        - signature
      properties:
        id:
          type: string
          readOnly: true
          example: 5b9e63bb-6fd0-4bea-aff2-cc5d4eb9cad0
        primaryType:
          type: string
          description: Video Metadata EIP-712 primaryType
          enum:
            - VideoAttestation
        domain:
          type: object
          description: Video Metadata EIP-712 domain
          additionalProperties: false
          required:
            - name
            - version
          properties:
            name:
              type: string
              enum:
                - "Verifiable Video"
            version:
              type: string
              enum:
                - "1"
        message:
          type: object
          additionalProperties: false
          description: Video Metadata EIP-712 message content
          required:
            - video
            - attestations
            - signer
            - timestamp
          properties:
            video:
              type: string
            attestations:
              type: array
              items:
                type: object
                additionalProperties: false
                required:
                  - role
                  - address
                properties:
                  role:
                    type: string
                  address:
                    type: string
            signer:
              type: string
            timestamp:
              type: number
        signature:
          type: string
          description: Video Metadata EIP-712 message signature
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which the object was created
        signatureType:
          type: string
          enum:
            - eip712
            - flow
        storage:
          additionalProperties: false
          properties:
            ipfs:
              type: object
              additionalProperties: false
              properties:
                $ref: "#/components/schemas/ipfs-file-info/properties"
                updatedAt:
                  readOnly: true
                  type: number
                  description: |
                    Timestamp (in milliseconds) at which IPFS export task was updated
                  example: 1587667174725
            status:
              $ref: "#/components/schemas/storage-status"
    ipfs-export-params:
      type: object
      additionalProperties: false
      properties:
        $ref: >-
          #/components/schemas/asset/properties/storage/properties/ipfs/properties/spec/properties
        pinata:
          description: |
            Custom credentials for the Piñata service. Must have either
            a JWT or an API key and an API secret.
          oneOf:
            - type: object
              additionalProperties: false
              required:
                - jwt
              properties:
                jwt:
                  type: string
                  writeOnly: true
                  description: |
                    Will be added to the Authorization header as a
                    Bearer token.
            - type: object
              additionalProperties: false
              required:
                - apiKey
                - apiSecret
              properties:
                apiKey:
                  type: string
                  description: Will be added to the pinata_api_key header.
                apiSecret:
                  type: string
                  writeOnly: true
                  description:
                    Will be added to the pinata_secret_api_key header.
    storage-status:
      readOnly: true
      additionalProperties: false
      required:
        - phase
        - tasks
      properties:
        phase:
          type: string
          description: Phase of the asset storage
          enum:
            - waiting
            - processing
            - ready
            - failed
            - reverted
        progress:
          type: number
          description: Current progress of the task updating the storage.
        errorMessage:
          type: string
          description: Error message if the last storage changed failed.
        tasks:
          type: object
          additionalProperties: false
          properties:
            pending:
              type: string
              description: |
                ID of any currently running task that is exporting this
                asset to IPFS.
            last:
              type: string
              description: |
                ID of the last task to run successfully, that created
                the currently saved data.
            failed:
              type: string
              description: ID of the last task to fail execution.
paths:
  /stream:
    post:
      summary: Create a stream
      description: |
        The only parameter you are required to set is the name of your stream,
        but we also highly recommend that you define transcoding profiles
        parameter that suits your specific broadcasting configuration.
        \
        \
        If you do not define transcoding rendition profiles when creating the
        stream, a default set of profiles will be used. These profiles include
        240p,  360p, 480p and 720p.
        \
        \
        The playback policy is set to public by default for new streams. It can
        also be added upon the creation of a new stream by adding
        `"playbackPolicy": {"type": "jwt"}`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/new-stream-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stream"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      summary: Retrieve streams
      parameters:
        - name: streamsonly
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stream"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/stream/{id}":
    parameters:
      - name: id
        description: ID of the stream
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a stream

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stream"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Update a stream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stream-patch-payload"
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: Delete a stream
      description: |

        This will also suspend any active stream sessions, so make sure to wait
        until the stream has finished. To explicitly interrupt an active
        session, consider instead updating the suspended field in the stream
        using the PATCH stream API.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the stream
          required: true
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/stream/{id}/terminate":
    parameters:
      - name: id
        description: ID of the stream
        in: path
        required: true
        schema:
          type: string
    delete:
      summary: Terminates a live stream
      description: |
        `DELETE /stream/{id}/terminate` can be used to terminate an ongoing
        session on a live stream. Unlike suspending the stream, it allows the
        streamer to restart streaming even immediately, but it will force
        terminate the current session and stop the recording.
        \
        \
        A 204 No Content status response indicates the stream was successfully
        terminated.
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /multistream/target:
    get:
      summary: Retrieve Multistream Targets

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/multistream-target"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      summary: Create a multistream target
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multistream-target"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/multistream-target"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/multistream/target/{id}":
    parameters:
      - name: id
        description: ID of the multistream target
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a multistream target

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/multistream-target"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Update Multistream Target
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multistream-target-patch-payload"
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: Delete a multistream target
      description: |
        Make sure to remove any references to the target on existing
        streams before actually deleting it from the API.
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /webhook:
    get:
      summary: Retrieve a Webhook
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      summary: Create a webhook
      description: >
        To create a new webhook, you need to make an API call with the events
        you want to listen for and the URL that will be called when those events
        occur.

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/webhook/{id}":
    get:
      summary: Retrieve a webhook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      summary: Update a webhook

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      summary: Delete a webhook
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /asset:
    get:
      summary: Retrieve assets
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /asset/request-upload:
    post:
      summary: Upload an asset
      description: |
        To upload an asset, your first need to request for a direct upload URL
        and only then actually upload the contents of the asset.
        \
        \
        Once you created a upload link, you have 2 options, resumable or direct
        upload. For a more reliable experience, you should use resumable uploads
        which will work better for users with unreliable or slow network
        connections. If you want a simpler implementation though, you should
        just use a direct upload.


        ## Direct Upload
        For a direct upload, make a PUT request to the URL received in the url
        field of the response above, with the raw video file as the request
        body. response above:


        ## Resumable Upload
        Livepeer supports resumable uploads via Tus. This section provides a
        simple example of how to use tus-js-client to upload a video file.
        \
        \
        From the previous section, we generated a URL to upload a video file to
        Livepeer on POST /api/asset/request-upload. You should use the
        tusEndpoint field of the response to upload the video file and track the
        progress:

        ``` 
        # This assumes there is an `input` element of `type="file"` with id
        `fileInput` in the HTML


        const input = document.getElementById('fileInput');

        const file = input.files[0];

        const upload = new tus.Upload(file, {
          endpoint: tusEndpoint, // URL from `tusEndpoint` field in the
        `/request-upload` response
          metadata: {
            filename,
            filetype: 'video/mp4',
          },
          uploadSize: file.size,
          onError(err) {
            console.error('Error uploading file:', err);
          },
          onProgress(bytesUploaded, bytesTotal) {
            const percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
            console.log('Uploaded ' + percentage + '%');
          },
          onSuccess() {
            console.log('Upload finished:', upload.url);
          },
        });

        const previousUploads = await upload.findPreviousUploads();

        if (previousUploads.length > 0) {
          upload.resumeFromPreviousUpload(previousUploads[0]);
        }

        upload.start();

        ```

        > Note: If you are using tus from node.js, you need to add a custom URL
        storage to enable resuming from previous uploads. On the browser, this
        is enabled by default using local storage. In node.js, add urlStorage:
        new tus.FileUrlStorage("path/to/tmp/file"), to the UploadFile object
        definition above.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new-asset-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - url
                  - tusEndpoint
                  - asset
                  - task
                properties:
                  url:
                    type: string
                    example: >-
                      https://origin.livepeer.com/api/asset/upload/direct?token=eyJhbGciOiJIUzI1NiJ9.eyJtc2ciOiJoZWxsbyBoYWNrZXIsIHRoZXJlJ3Mgbm90aGluZyBmb3IgeW91IGhlcmUg8J-YhiJ9.1YDjmXsqLcgNyMSzT4kXl_kIni46_EuGX_xfqmC7e0Q
                  tusEndpoint:
                    type: string
                    example: >-
                      https://origin.livepeer.com/api/asset/upload/tus?token=eyJhbGciOiJIUzI1NiJ9.eyJtc2ciOiJoZWxsbyBoYWNrZXIsIHRoZXJlJ3Mgbm90aGluZyBmb3IgeW91IGhlcmUg8J-YhiJ9.1YDjmXsqLcgNyMSzT4kXl_kIni46_EuGX_xfqmC7e0Q
                  asset:
                    $ref: "#/components/schemas/asset"
                  task:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /asset/upload/url:
    post:
      summary: Upload asset via URL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new-asset-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - asset
                  - task
                properties:
                  asset:
                    $ref: "#/components/schemas/asset"
                  task:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/asset/{assetId}":
    get:
      summary: Retrieves an asset
      parameters:
        - in: path
          name: assetId
          schema:
            type: string
          description: ID of the asset
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Patch an asset
      parameters:
        - in: path
          name: assetId
          schema:
            type: string
          description: ID of the asset
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/asset-patch-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: Delete an asset
      parameters:
        - in: path
          name: assetId
          schema:
            type: string
          description: ID of the asset
          required: true
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /clip:
    post:
      summary: Create a clip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/clip-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - asset
                  - task
                properties:
                  asset:
                    $ref: "#/components/schemas/asset"
                  task:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/stream/{id}/clips":
    get:
      summary: Retrieve clips of a livestream
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the parent stream or playbackId of parent stream
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/session/{id}/clips":
    get:
      summary: Retrieve clips of a session
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the parent session
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /room:
    post:
      summary: Create a room
      description: |
        Create a multiparticipant livestreaming room.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create-room-response"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}":
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      summary: Retrieve a room
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      summary: Delete a room
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}/egress":
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room-egress-payload"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      summary: Start room RTMP egress
      description: |
        Create a livestream for your room.
        This allows you to leverage livestreaming features like recording and HLS output.
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: Stop room RTMP egress
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}/user":
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room-user-payload"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      summary: Create a room user
      description: |
        Call this endpoint to add a user to a room, specifying a display name at a minimum.
        The response will contain a joining URL for Livepeer's default meeting app.
        Alternatively the joining token can be used with a custom app.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room-user-response"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}/user/{userId}":
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      summary: Get user details
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get-room-user-response"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room-user-update-payload"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      summary: Update a room user
      description: Update properties for a user.
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      summary: Remove a user from the room
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /data/views/query:
    get:
      summary: Query viewership metrics
      description: |
        Requires a private (non-CORS) API key to be used.
      parameters:
        - name: playbackId
          in: query
          description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          schema:
            type: string
        - name: from
          in: query
          description: Start timestamp for the query range (inclusive)
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: to
          in: query
          description: End timestamp for the query range (exclusive)
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: timeStep
          in: query
          description: The time step to aggregate viewership metrics by
          schema:
            type: string
            enum:
              - hour
              - day
              - week
              - month
              - year
        - name: assetId
          in: query
          description: The asset ID to filter metrics for
          schema:
            type: string
        - name: streamId
          in: query
          description: The stream ID to filter metrics for
          schema:
            type: string
        - name: creatorId
          in: query
          description: The creator ID to filter the query results
          schema:
            type: string
        - name: "breakdownBy[]"
          in: query
          description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          schema:
            type: array
            items:
              type: string
              enum:
                - playbackId
                - deviceType
                - device
                - cpu
                - os
                - browser
                - browserEngine
                - continent
                - country
                - subdivision
                - timezone
                - geohash
                - viewerId
                - creatorId
      responses:
        "200":
          description: A list of Metric objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/viewership-metric"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /data/views/query/creator:
    get:
      summary: Query creator viewership metrics
      description: |
        Requires a proof of ownership to be sent in the request, which for now is just the assetId or streamId parameters (1 of those must be in the query-string).
      parameters:
        - name: from
          in: query
          description: Start timestamp for the query range (inclusive)
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: to
          in: query
          description: End timestamp for the query range (exclusive)
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: timeStep
          in: query
          description: The time step to aggregate viewership metrics by
          schema:
            type: string
            enum:
              - hour
              - day
              - week
              - month
              - year
        - name: assetId
          in: query
          description: The asset ID to filter metrics for
          schema:
            type: string
        - name: streamId
          in: query
          description: The stream ID to filter metrics for
          schema:
            type: string
        - name: creatorId
          in: query
          description: The creator ID to filter the query results
          schema:
            type: string
        - name: "breakdownBy[]"
          in: query
          description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          schema:
            type: array
            items:
              type: string
              enum:
                - deviceType
                - device
                - cpu
                - os
                - browser
                - browserEngine
                - continent
                - country
                - subdivision
                - timezone
                - viewerId
      responses:
        "200":
          description: A list of Metric objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/viewership-metric"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/data/views/query/total/{playbackId}":
    get:
      summary: Query public total views metrics
      description: |
        Allows querying for the public metrics for viewership about a video.
        This can be called from the frontend with a CORS key, or even
        unauthenticated.
      parameters:
        - name: playbackId
          in: path
          required: true
          description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          schema:
            type: string
      responses:
        "200":
          description:
            A single Metric object with the viewCount and playtimeMins metrics.
          content:
            application/json:
              schema:
                type: object
                description: |
                  A simplified metric object about aggregate viewership of an
                  asset. Either playbackId or dStorageUrl will be set.
                required:
                  - viewCount
                  - playtimeMins
                properties:
                  playbackId:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/playbackId
                  dStorageUrl:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/dStorageUrl
                  viewCount:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/viewCount
                  playtimeMins:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/playtimeMins
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/data/usage/query":
    get:
      summary: Query usage metrics
      description: |

      parameters:
        - name: from
          in: query
          description: |
            Start millis timestamp for the query range (inclusive)
          schema:
            type: integer
        - name: to
          in: query
          description: |
            End millis timestamp for the query range (exclusive)
          schema:
            type: integer
        - name: timeStep
          in: query
          description: |
            The time step to aggregate viewership metrics by
          schema:
            type: string
            enum:
              - hour
              - day
        - name: creatorId
          in: query
          description: |
            The creator ID to filter the query results
          schema:
            type: string
      responses:
        "200":
          description: A Usage Metric object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/usage-metric"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /session:
    get:
      summary: Retrieve sessions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/session"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/session/{id}":
    get:
      summary: Retrieve a session
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the session
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/session"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/stream/{parentId}/sessions":
    get:
      summary: Retrieve Recorded Sessions
      parameters:
        - in: path
          name: parentId
          schema:
            type: string
          description: ID of the parent stream
          required: true
        - in: query
          name: record
          schema:
            type: integer
            example: 1
          description: |
            Flag indicating if the response should only include recorded
            sessions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/session"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /access-control/signing-key:
    post:
      summary: Create a signing key
      description: >

        The publicKey is a representation of the public key, encoded as base 64
        and is passed as a string, and  the privateKey is displayed only on
        creation. This is the only moment where the client can save the private
        key, otherwise it will be lost. Remember to decode your string when
        signing JWTs.

        Up to 10 signing keys can be generated, after that you must delete at
        least one signing key to create a new one.

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signing-key"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      summary: Retrieves signing keys
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/signing-key"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/access-control/signing-key/{keyId}":
    delete:
      summary: Delete Signing Key
      parameters:
        - in: path
          name: keyId
          schema:
            type: string
          description: ID of the signing key
          required: true
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      summary: Retrieves a signing key
      parameters:
        - in: path
          name: keyId
          schema:
            type: string
          description: ID of the signing key
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signing-key"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      summary: Update a signing key
      parameters:
        - in: path
          name: keyId
          schema:
            type: string
          description: ID of the signing key
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disabled:
                  type: boolean
                name:
                  type: string
              additionalProperties: false
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /task:
    get:
      summary: Retrieve Tasks
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/task"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/task/{taskId}":
    get:
      summary: Retrieve a Task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          description: ID of the task
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        default:
          description: Error
  /transcode:
    post:
      summary: Transcode a video
      description: >
        `POST /transcode` transcodes a video file and uploads the results to the

        specified storage service. 

        \

        \

        Transcoding is asynchronous so you will need to check the status of the

        task in order to determine when transcoding is complete. The `id` field

        in the response is the unique ID for the transcoding `Task`. The task

        status can be queried using the [GET tasks

        endpoint](https://docs.livepeer.org/reference/api/get-tasks):

        \

        \

        When `status.phase` is `completed`,  transcoding will be complete and

        the results will be stored in the storage service and the specified

        output location.

        \

        \

        The results will be available under `params.outputs.hls.path` and

        `params.outputs.mp4.path` in the specified storage service.

        ## Input

        \

        This endpoint currently supports the following inputs:

        - HTTP

        - S3 API Compatible Service

        \

        \

        **HTTP**

        \

        A public HTTP URL can be used to read a video file.

        ```json

        {
            "url": "https://www.example.com/video.mp4"
        }

        ```

        | Name | Type   | Description                          |

        | ---- | ------ | ------------------------------------ |

        | url  | string | A public HTTP URL for the video file. |


        Note: For IPFS HTTP gateway URLs, the API currently only supports “path

        style” URLs and does not support “subdomain style” URLs. The API will

        support both styles of URLs in a future update.

        \

        \

        **S3 API Compatible Service**

        \

        \

        S3 credentials can be used to authenticate with a S3 API compatible

        service to read a video file.


        ```json

        {
            "type": "s3",
            "endpoint": "https://gateway.storjshare.io",
            "credentials": {
                "accessKeyId": "$ACCESS_KEY_ID",
                "secretAccessKey": "$SECRET_ACCESS_KEY"
            },
            "bucket": "inbucket",
            "path": "/video/source.mp4"
        }

        ```



        ## Storage

        \

        This endpoint currently supports the following storage services:

        - S3 API Compatible Service

        - Web3 Storage

        \

        \

        **S3 API Compatible Service**

        ```json

        {
          "type": "s3",
            "endpoint": "https://gateway.storjshare.io",
            "credentials": {
                "accessKeyId": "$ACCESS_KEY_ID",
                "secretAccessKey": "$SECRET_ACCESS_KEY"
            },
            "bucket": "mybucket"
        }

        ```


        **Web3 Storage**


        ```json

        {
          "type": "web3.storage",
            "credentials": {
                "proof": "$UCAN_DELEGATION_PROOF",
            }
        }

        ```




        ## Outputs

        \

        This endpoint currently supports the following output types:

        - HLS

        - MP4


        **HLS**


        ```json

        {
          "hls": {
                "path": "/samplevideo/hls"
            }
        }

        ```



        **MP4**


        ```json

        {
          "mp4": {
                "path": "/samplevideo/mp4"
            }
        }

        ```

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transcode-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/playback/{id}":
    get:
      summary: Retrieve Playback Info
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the playback
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playback-info"
        "404":
          description: Playback not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
